@model KJCFRubberRoller.Models.UpdateViewModel
@{
    if ((String)Url.RequestContext.RouteData.Values["staffID"] == null)
    {
        ViewBag.Title = "Edit Profile Details";
    }
    else
    {
        ViewBag.Title = $"Edit Staff ({(String)Url.RequestContext.RouteData.Values["staffID"]}) Details";
    }
    ViewBag.accountStatusDropDown = new List<SelectListItem>()
{
        new SelectListItem{Text="Inactive", Value="0"},
        new SelectListItem{Text="Active", Value="1"},
    };
}

<div class="container">
    <div class="row mb-4">
        <div class="col-md-8 mx-auto">

            @if (TempData["formStatus"] != null)
            {
                <div class="alert @((bool)TempData["formStatus"] == true ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                        <span class="sr-only">Close</span>
                    </button>
                    @Html.Raw(TempData["formStatusMsg"])
                </div>
            }

            <div class="py-2 bg-kjcf">
                <h2 class="text-white text-center">@((String)Url.RequestContext.RouteData.Values["staffID"] == null ? "Edit Profile Details" : $"Edit Staff ({(String)Url.RequestContext.RouteData.Values["staffID"]}) Details")</h2>
            </div>
            <div class="bg-white container py-3">
                <section id="registerForm">
                    <p class="required">* Require field</p>
                    @using (Html.BeginForm("Update", "Account",(String)Url.RequestContext.RouteData.Values["staffID"] , FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                    {
                        @Html.AntiForgeryToken()
                        <hr />
                        <div class="form-group">
                            @Html.LabelFor(m => m.Email)<span class="required">*</span>
                            @Html.TextBoxFor(m => m.Email, new { @class = "form-control", placeholder = "example@kianjoocan.com.my" })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(m => m.staffID)<span class="required">*</span>
                            @Html.TextBoxFor(m => m.staffID, new { @class = "form-control staffID", maxlength = "5", placeholder = "K0001" })
                            @Html.ValidationMessageFor(model => model.staffID, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(m => m.name)<span class="required">*</span>
                            @Html.TextBoxFor(m => m.name, new { @class = "form-control", placeholder = "James William" })
                            @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(m => m.IC)<span class="required">*</span>
                            @Html.TextBoxFor(m => m.IC, new { @class = "form-control", placeholder = "Without dashes. E.g - 010862125596" })
                            @Html.ValidationMessageFor(model => model.IC, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.position)<span class="required">*</span>
                            @Html.DropDownListFor(model => model.position, (IEnumerable<SelectListItem>)ViewData["userPosition"], "Select user position", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.position, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.status)<span class="required">*</span>
                            @Html.DropDownListFor(model => model.status, (IEnumerable<SelectListItem>)ViewBag.accountStatusDropDown, "Set account status", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.status, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <div class="row">
                                <div class="form-control">
                                    @Html.LabelFor(model => model.isReset)
                                    @Html.CheckBoxFor(m => m.isReset)
                                </div>
                            </div>

                        </div>
                        @Html.HiddenFor(model => model.Id)
                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                            </div>
                            <div class="row">
                                <div class="col-md-6 text-center">
                                    <button type="button" class="btn btn-primary w-75" id="backBtn">Back</button>
                                </div>
                                <div class="col-md-6 text-center">
                                    <input type="submit" class="btn btn-success w-75" value="Update" />
                                </div>
                            </div>
                        </div>
                    }
                </section>
            </div>
        </div>
    </div>
</div>

<script>
    (function () {
        if (document.querySelector('.alert') !== null) {
            setTimeout(() => {
                document.querySelector('.alert').remove();
            }, 5000);
        }
        document.querySelector('.staffID').addEventListener('keyup', (e) => {
            e.target.value = e.target.value.toUpperCase();
        });
    })();
    document.querySelector("#backBtn").addEventListener('click', e => {
        window.history.back();
    });
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
