@model KJCFRubberRoller.Models.Maintenance

@{
    if ((String)Url.RequestContext.RouteData.Values["id"] == null)
    {
        ViewBag.Title = "Add New Rubber Roller Maintenance Report";
    }
    else
    {
        ViewBag.Title = "Request for Maintenance";
    }
}

@{
    //Roller Type dropdown
    List<SelectListItem> rollerType = new List<SelectListItem>();
    rollerType.Add(new SelectListItem
    {
        Text = "Full Plate",
        Value = "Full Plate"
    });
    rollerType.Add(new SelectListItem
    {
        Text = "Stencil",
        Value = "Stencil"
    });

    //Roller usage dropdown
    List<SelectListItem> rollerUsage = new List<SelectListItem>();
    rollerUsage.Add(new SelectListItem
    {
        Text = "White Coating",
        Value = "White Coating"
    });
    rollerUsage.Add(new SelectListItem
    {
        Text = "Lacquer",
        Value = "Lacquer"
    });

    //Roller condition dropdown
    List<SelectListItem> rollerCondition = new List<SelectListItem>();
    rollerCondition.Add(new SelectListItem
    {
        Text = "Good",
        Value = "Good"
    });
    rollerCondition.Add(new SelectListItem
    {
        Text = "Fair",
        Value = "Fair"
    });
    rollerCondition.Add(new SelectListItem
    {
        Text = "Reject",
        Value = "Reject"
    });

    //Roller supplier dropdown
    List<SelectListItem> rollerSupplier = new List<SelectListItem>();
    rollerSupplier.Add(new SelectListItem
    {
        Text = "Mega",
        Value = "Mega"
    });
    rollerSupplier.Add(new SelectListItem
    {
        Text = "EIKOH",
        Value = "EIKOH"
    });
    rollerSupplier.Add(new SelectListItem
    {
        Text = "Canco",
        Value = "Canco"
    });
    rollerSupplier.Add(new SelectListItem
    {
        Text = "Other",
        Value = "Other"
    });
}

<div class="container">
    <div class="row mb-4">
        <div class="col-md-8 mx-auto">

            <div class="py-2 bg-kjcf">
                <h2 class="text-white text-center">@((String)Url.RequestContext.RouteData.Values["id"] == null ? "Add New Maintenance Report" : $"Update Roller {Model.rollerID}")</h2>
            </div>

            <div class="bg-white container py-3">
                <p class="required">* Require field</p>

                @using (Html.BeginForm((String)Url.RequestContext.RouteData.Values["id"] == null ? "Create" : "Update", "RubberRoller", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()

                    //Roller Issue
                    <div class="form-group">
                        @Html.LabelFor(model => model.maintenanceID)<span class="required">*</span>
                        @Html.TextBoxFor(model => model.maintenanceID, new { @class = "form-control", placeholder = "Enter roller Report Number" })
                        @Html.ValidationMessageFor(model => model.maintenanceID, "", new { @class = "text-danger" })
                    </div>

                    //Roller ID
                    <div class="form-group">
                        @Html.LabelFor(model => model.rollerID)<span class="required">*</span>
                        @Html.TextBoxFor(model => model.rollerID, new { @class = "form-control rID", placeholder = "Enter roller ID" })
                        @Html.ValidationMessageFor(model => model.rollerID, "", new { @class = "text-danger" })
                    </div>

                    //Roller Diameter
                    <div class="form-group">
                        @Html.LabelFor(model => model.diameterCore)<span class="required">*</span>
                        @Html.TextBoxFor(model => model.diameterCore, new { @class = "form-control", placeholder = "Enter roller diameter here", type = "number", step = "0.01", min = "0" })
                        @Html.ValidationMessageFor(model => model.diameterCore, "", new { @class = "text-danger" })
                    </div>

                    //Roller Diameter Roller
                    <div class="form-group">
                        @Html.LabelFor(model => model.diameterRoller)<span class="required">*</span>
                        @Html.TextBoxFor(model => model.diameterRoller, new { @class = "form-control", placeholder = "Enter roller diameter roller here", type = "number", step = "0.01", min = "0" })
                        @Html.ValidationMessageFor(model => model.diameterRoller, "", new { @class = "text-danger" })
                    </div>

                    //Roller total Mileage
                    <div class="form-group">
                        @Html.LabelFor(model => model.totalMileage)<span class="required">*</span>
                        @Html.TextBoxFor(model => model.totalMileage, new { @class = "form-control", placeholder = "Enter roller's total mileage here" })
                        @Html.ValidationMessageFor(model => model.totalMileage, "", new { @class = "text-danger" })
                    </div>

                    //Roller Opening Stock Date
                    <div class="form-group">
                        @Html.LabelFor(model => model.openingStockDate)<span class="required">*</span>
                        @Html.TextBoxFor(model => model.openingStockDate, new { @class = "form-control", placeholder = "Enter roller ID" })
                        @Html.ValidationMessageFor(model => model.openingStockDate, "", new { @class = "text-danger" })
                    </div>

                    //Roller Last production time
                    <div class="form-group">
                        @Html.LabelFor(model => model.lastProductionLine)<span class="required">*</span>
                        @Html.TextBoxFor(model => model.lastProductionLine, new { @class = "form-control", placeholder = "Enter roller ID" })
                        @Html.ValidationMessageFor(model => model.openingStockDate, "", new { @class = "text-danger" })
                    </div>

                    //Reason
                    <div class="form-group">
                        @Html.LabelFor(model => model.reason)<span class="required">*</span>
                        @Html.TextBoxFor(model => model.reason, new { @class = "form-control", placeholder = "Enter reason here" })
                        @Html.ValidationMessageFor(model => model.reason, "", new { @class = "text-danger" })
                    </div>

                    //Roller Remark
                    <div class="form-group">
                        @Html.LabelFor(model => model.remark)
                        @Html.TextAreaFor(model => model.remark, new { @class = "form-control", placeholder = "Enter any remarks here" })
                        @Html.ValidationMessageFor(model => model.remark, "", new { @class = "text-danger" })
                    </div>

                    //New Roller Diameter
                    <div class="form-group">
                        @Html.LabelFor(model => model.newDiameter)<span class="required">*</span>
                        @Html.TextBoxFor(model => model.newDiameter, new { @class = "form-control", placeholder = "Enter roller new Diameter here", type = "number", step = "0.01", min = "0" })
                        @Html.ValidationMessageFor(model => model.newDiameter, "", new { @class = "text-danger" })
                    </div>

                    //New Roller Shore Hardness
                    <div class="form-group">
                        @Html.LabelFor(model => model.newShoreHardness)<span class="required">*</span>
                        @Html.TextBoxFor(model => model.newShoreHardness, new { @class = "form-control", placeholder = "Enter roller new Shore hardness here", type = "number", step = "0.01", min = "0" })
                        @Html.ValidationMessageFor(model => model.newShoreHardness, "", new { @class = "text-danger" })
                    </div>

                    //Correctivve Action
                    <div class="form-group">
                        @Html.LabelFor(model => model.correctiveAction)<span class="required">*</span>
                        @Html.TextBoxFor(model => model.correctiveAction, new { @class = "form-control", placeholder = "Enter roller corrective action here" })
                        @Html.ValidationMessageFor(model => model.correctiveAction, "", new { @class = "text-danger" })
                    </div>

                    //Reported by
                    <div class="form-group">
                        @Html.LabelFor(model => model.reportedBy)<span class="required">*</span>
                        @Html.TextBoxFor(model => model.reportedBy, new { @class = "form-control", placeholder = "Enter your name here" })
                        @Html.ValidationMessageFor(model => model.reportedBy, "", new { @class = "text-danger" })
                    </div>

                    //Reported date and time
                    <div class="form-group">
                        @Html.LabelFor(model => model.reportDateTime)<span class="required">*</span>
                        @Html.TextBoxFor(model => model.reportDateTime, new { @class = "form-control", placeholder = "Enter Date and time" })
                        @Html.ValidationMessageFor(model => model.reportDateTime, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group row">
                        <div class="col-md-6">
                            <input type="reset" value="Clear" class="btn btn-primary btn-block" />
                        </div>
                        <div class="col-md-6">
                            <input type="submit" value='@((String)Url.RequestContext.RouteData.Values["id"] == null ? "Add New Roller Maintenance Record" : "Update Roller Category")' class="btn btn-success btn-block" />
                        </div>
                    </div>

                }
            </div>
        </div>
    </div>
</div>
