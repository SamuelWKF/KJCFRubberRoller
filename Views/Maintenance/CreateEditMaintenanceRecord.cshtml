@model KJCFRubberRoller.Models.Maintenance

@{
    if ((String)Url.RequestContext.RouteData.Values["id"] == null)
    {
        ViewBag.Title = "File New Maintenance Report";
    }
    else
    {
        ViewBag.Title = "Update Maintenance Report";
    }
}

@*Operational Line dropdown list*@
@{
    List<SelectListItem> operationLineList = new List<SelectListItem>();
    operationLineList.Add(new SelectListItem
    {
        Text = "Line 1",
        Value = "1"
    });
    operationLineList.Add(new SelectListItem
    {
        Text = "Line 2",
        Value = "2",
    });
    operationLineList.Add(new SelectListItem
    {
        Text = "Line 3",
        Value = "3",
    });
    operationLineList.Add(new SelectListItem
    {
        Text = "Line 4",
        Value = "4"
    });
}

<div class="container">
    <div class="row mb-4">
        <div class="col-md-8 mx-auto">

            @if (TempData["formStatus"] != null)
            {
                <div class="alert @((bool)TempData["formStatus"] == true ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                        <span class="sr-only">Close</span>
                    </button>
                    @TempData["formStatusMsg"]
                </div>
            }

            <div class="py-2 bg-kjcf">
                <h2 class="text-white text-center">@((String)Url.RequestContext.RouteData.Values["id"] == null ? "File New Maintenance Report" : $"Update Maintenance report {Model.maintenanceID}")</h2>
            </div>

            <div class="bg-white container py-3">
                <p class="required">* Require field</p>

                @using (Html.BeginForm((String)Url.RequestContext.RouteData.Values["id"] == null ? "Create" : "Update", "Maintenance", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    // Roller ID
                    <div class="form-group">
                        @Html.Label("Roller ID")<span class="required">*</span>
                        @Html.TextBox("rollID", "", new { @class = "form-control", @readonly = "true" })
                    </div>

                    //Roller Diameter Core
                    <div class="form-group">
                        @Html.LabelFor(model => model.diameterCore)<span class="required">*</span>
                        @Html.TextBoxFor(model => model.diameterCore, new { @class = "form-control", placeholder = "Enter roller diameter core here", type = "number", step = "0.01", min = "0" })
                        @Html.ValidationMessageFor(model => model.diameterCore, "", new { @class = "text-danger" })
                    </div>

                    //Roller Diameter
                    <div class="form-group">
                        @Html.LabelFor(model => model.diameterRoller)<span class="required">*</span>
                        @Html.TextBoxFor(model => model.diameterRoller, new { @class = "form-control", placeholder = "Enter diameter of roller here", type = "number", step = "0.01", min = "0" })
                        @Html.ValidationMessageFor(model => model.diameterRoller, "", new { @class = "text-danger" })
                    </div>

                    //Roller total Mileage
                    <div class="form-group">
                        @Html.LabelFor(model => model.totalMileage)<span class="required">*</span>
                        @Html.TextBoxFor(model => model.totalMileage, new { @class = "form-control", placeholder = "Enter mileage here" })
                        @Html.ValidationMessageFor(model => model.totalMileage, "", new { @class = "text-danger" })
                    </div>

                    //Roller Opening Stock Date
                    <div class="form-group">
                        @Html.LabelFor(model => model.openingStockDate)<span class="required">*</span>                                              
                        @Html.TextBoxFor(model => model.openingStockDate, new { @class = "form-control", @id = "datepicker", placeholder = "Enter opening stock date here" })
                        @Html.ValidationMessageFor(model => model.openingStockDate, "", new { @class = "text-danger" })
                    </div>
                   
                    //Roller Last operation line
                    <div class="form-group">
                        @Html.LabelFor(Model => Model.lastProductionLine)<span class="required">*</span>
                        @Html.DropDownListFor(Model => Model.lastProductionLine, operationLineList, "Select roller's last operation line", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.lastProductionLine, "", new { @class = "text-danger" })
                    </div>

                    //Reason
                    <div class="form-group">
                        @Html.LabelFor(model => model.reason)<span class="required">*</span>
                        @Html.TextBoxFor(model => model.reason, new { @class = "form-control", placeholder = "Enter reason for maintenance here" })
                        @Html.ValidationMessageFor(model => model.reason, "", new { @class = "text-danger" })
                    </div>

                    //Roller Remark
                    <div class="form-group">
                        @Html.LabelFor(model => model.remark)
                        @Html.TextAreaFor(model => model.remark, new { @class = "form-control", placeholder = "Enter any remarks here" })
                        @Html.ValidationMessageFor(model => model.remark, "", new { @class = "text-danger" })
                    </div>

                    //New Roller Diameter
                    <div class="form-group">
                        @Html.LabelFor(model => model.newDiameter)<span class="required">*</span>
                        @Html.TextBoxFor(model => model.newDiameter, new { @class = "form-control", placeholder = "Enter new Diameter here", type = "number", step = "0.01", min = "0" })
                        @Html.ValidationMessageFor(model => model.newDiameter, "", new { @class = "text-danger" })
                    </div>

                    //New Roller Shore Hardness
                    <div class="form-group">
                        @Html.LabelFor(model => model.newShoreHardness)<span class="required">*</span>
                        @Html.TextBoxFor(model => model.newShoreHardness, new { @class = "form-control", placeholder = "Enter roller new shore hardness here" })
                        @Html.ValidationMessageFor(model => model.newShoreHardness, "", new { @class = "text-danger" })
                    </div>

                    //Corrective Action
                    <div class="form-group">
                        @Html.LabelFor(model => model.correctiveAction)<span class="required">*</span>
                        @Html.TextBoxFor(model => model.correctiveAction, new { @class = "form-control", placeholder = "Enter corrective action here" })
                        @Html.ValidationMessageFor(model => model.correctiveAction, "", new { @class = "text-danger" })
                    </div>

                    //Reported by
                    //<div class="form-group">
                    //@Html.LabelFor(model => model.reportedBy)<span class="required">*</span>
                    //@Html.TextBoxFor(model => model.reportedBy, new { @class = "form-control", placeholder = "Enter your name here" })
                    //@Html.ValidationMessageFor(model => model.reportedBy, "", new { @class = "text-danger" })
                    //</div>

                    //Reported date and time
                    //<div class="form-group">
                    //@Html.LabelFor(model => model.reportDateTime)<span class="required">*</span>
                    //@Html.TextBoxFor(model => model.reportDateTime, new { @class = "form-control", placeholder = "Enter Date and time" })
                    //@Html.ValidationMessageFor(model => model.reportDateTime, "", new { @class = "text-danger" })
                    //</div>

                    if ((String)Url.RequestContext.RouteData.Values["id"] != null)
                    {
                        @Html.HiddenFor(m => m.maintenanceID)
                    }

                    <div class="form-group row">
                        <div class="col-md-6">
                            <input type="reset" value="Clear" class="btn btn-primary btn-block" />
                        </div>
                        <div class="col-md-6">
                            <input type="submit" value='@((String)Url.RequestContext.RouteData.Values["id"] == null ? "Add New Maintenance Report" : "Update Maintenance report")' class="btn btn-success btn-block" />
                        </div>
                    </div>

                }
            </div>
        </div>
    </div>
</div>

<script>
    (function () {
        if (document.querySelector('.alert') !== null) {
            setTimeout(() => {
                document.querySelector('.alert').remove();
            }, 5000);
        }
        document.querySelector('.rID').addEventListener('keyup', (e) => {
            e.target.value = e.target.value.toUpperCase();
        });
    })();
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <!-- Bootstrap Select script -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.12/dist/js/bootstrap-select.min.js"></script>
}