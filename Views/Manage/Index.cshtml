@model KJCFRubberRoller.Models.ApplicationUser
@using KJCFRubberRoller.Models
@{
    ViewBag.Title = "Profile";
}

<div class="container">
    <div class="row mb-4">
        <div class="col-md-8 mx-auto">

            @if (TempData["formStatus"] != null)
            {
                <div class="alert @((bool)TempData["formStatus"] == true ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                        <span class="sr-only">Close</span>
                    </button>
                    @TempData["formStatusMsg"]
                </div>
            }

            <div class="py-2 bg-kjcf">
                <h2 class="text-white text-center">Register Staff Details</h2>
            </div>
            <div class="bg-white container py-3">
                <section id="registerForm">
                    <p class="required">* Require field</p>
                    @using (Html.BeginForm("UpdateProfile", "Manage", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                    {
                        @Html.AntiForgeryToken()
                        <hr />
                        //Staff ID
                        <div class="form-group">
                            @Html.LabelFor(m => m.staffID)
                            @Html.TextBoxFor(m => m.staffID, new { @class = "form-control staffID", @readonly = "true", maxlength = "5" })
                        </div>

                        //Staff position
                        <div class="form-group">
                            @Html.LabelFor(m => m.position)
                            @{
                                var position = UserRole.getRole(Model.position);
                                @Html.TextBoxFor(m => position, new
                                {
                                    @class = "form-control",
                                    @readonly = "true"
                                })
                            }
                        </div>

                        //Staff email
                        <div class="form-group">
                            @Html.LabelFor(m => m.Email)<span class="required">*</span>
                            @Html.TextBoxFor(m => m.Email, new { @class = "form-control", @readonly = "true" })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        </div>

                        //Staff name
                        <div class="form-group">
                            @Html.LabelFor(m => m.name)<span class="required">*</span>
                            @Html.TextBoxFor(m => m.name, new { @class = "form-control" , @readonly = "true"})
                            @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
                        </div>

                        //Staff IC
                        <div class="form-group">
                            @Html.LabelFor(m => m.IC)<span class="required">*</span>
                            @Html.TextBoxFor(m => m.IC, new { @class = "form-control" , @readonly = "true"})
                            @Html.ValidationMessageFor(model => model.IC, "", new { @class = "text-danger" })
                        </div>

                        @Html.HiddenFor(m => m.Id)

                        //Buttons
                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                            </div>
                            <div class="row">
                                <div class="col-md-12">
                                    @Html.ActionLink("Change password", "ChangePassword", null, new { @class = "btn btn-success btn-block" })
                                </div>
                                @*<div class="col-md-6">
                                    <input type="submit" class="btn btn-success btn-block" value="Update Profile" />
                                </div>*@
                            </div>
                        </div>
                    }
                </section>
            </div>
        </div>
    </div>
</div>

<script>
    (function () {
        if (document.querySelector('.alert') !== null) {
            setTimeout(() => {
                document.querySelector('.alert').remove();
            }, 5000);
        }
        document.querySelector('.staffID').addEventListener('keyup', (e) => {
            e.target.value = e.target.value.toUpperCase();
        });
    })();
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
