@model IPagedList<KJCFRubberRoller.Models.RubberRoller>
@using PagedList;
@using PagedList.Mvc;

@{
    ViewBag.Title = "Roller Information";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row mb-4">
    <div class="col-md-11 mx-auto">
        <div class="py-2 mt-4 bg-kjcf">
            <h2 class="text-white text-center">Roller Information</h2>
        </div>
        <div class="bg-white container-fluid py-3">
            @Html.Label("Search:")
            @Html.TextBox("Search", "", htmlAttributes: new { @class = "form-control rr_location_search", placeholder = "Filter roller record here..." })
            <br />
            <table class="table table-hover table-striped sortable">
                <thead>
                    <tr class="text-center">
                        <th class="text-center">
                            No.
                        </th>
                        <th>
                            Roller ID
                        </th>
                        <th>
                            Roller Description
                        </th>
                        <th>
                            Last Usage Date
                        </th>
                        <th>
                            Last Maintenance Date
                        </th>
                        <th>Last Refurbish Date</th>
                        <th>Current Location</th>
                        <th>Current Total Mileage<br />(After Last Refurbish)</th>
                        <th>Status</th>
                    </tr>
                </thead>
                @if (Model.FirstOrDefault() == null)
                {
                    <tr><td colspan="12" class="text-center">There are currently no record.</td></tr>
                }

                @if (Model != null)
                {
                    foreach (var item in Model.Select((value, index) => new { value, index }))
                    {
                        <tr>
                            <td class="text-center">
                                @item.index
                            </td>
                            <td class="text-center">
                                @item.value.rollerID
                            </td>
                            <td class="text-justify">
                                @item.value.RollerCategory.size - @item.value.RollerCategory.description
                            </td>
                            <td class="text-center">
                                @{
                                    var lastUsageDate = "-";
                                    if (item.value.last_usage_date != null)
                                    {
                                        lastUsageDate = item.value.last_usage_date.Value.ToString("dd-MMM-yyyy");
                                    }
                                }
                                @lastUsageDate
                            </td>
                            <td class="text-center">
                                @{
                                    var lastMaintenanceDate = "-";
                                    if (item.value.Maintenances.Where(m => m.sendForRefurbished == false).LastOrDefault() != null)
                                    {
                                        lastMaintenanceDate = item.value.Maintenances
                                                            .Where(m => m.sendForRefurbished == false)
                                                            .LastOrDefault()
                                                            .approveDateTime.Value.ToString("dd-MMM-yyyy");
                                    }
                                }
                                @lastMaintenanceDate
                            </td>
                            <td class="text-center">
                                @{
                                    var lastRefurbishDate = "-";
                                    if (item.value.Maintenances.Where(m => m.sendForRefurbished == true).LastOrDefault() != null)
                                    {
                                        lastRefurbishDate = item.value.Maintenances
                                                            .Where(m => m.sendForRefurbished == true)
                                                            .LastOrDefault()
                                                            .approveDateTime.Value.ToString("dd-MMM-yyyy");
                                    }
                                }
                                @lastRefurbishDate
                            </td>
                            <td class="text-center">
                                @{
                                    var currentLocation = "-";
                                    if (item.value.RollerLocations.LastOrDefault() != null)
                                    {
                                        currentLocation = item.value.RollerLocations.LastOrDefault().location;
                                    }
                                }
                                @currentLocation
                            </td>
                            <td class="text-center">
                                @{
                                    var currentMileage = "0";
                                    if (item.value.Schedules.LastOrDefault() != null)
                                    {
                                        currentMileage = item.value.Schedules.LastOrDefault().endMileage.ToString();
                                    }
                                }
                                @currentMileage
                            </td>
                            <td class="text-center">
                                @item.value.status
                            </td>
                        </tr>
                    }
                }
            </table>
            @Html.PagedListPager(Model, i => Url.Action("Index", "RubberRoller", new { i }))
        </div>
    </div>
</div>


<script>
    // IIFE (Immediately Invoked Function Expression)
    (function () {
        // Select the search input box for each of the table list
        const searchBox = document.querySelector('input.rr_location_search');
        // Add event listeners to each search box
        searchBox.addEventListener('input', (e) => {
            const table = document.querySelector('.table').children[1].children;
            Array.from(table).forEach((v, i) => {
                if (v.innerText.toLowerCase().indexOf(searchBox.value.toLowerCase()) !== -1) {
                    v.style.removeProperty('display');
                } else {
                    v.style.display = 'none';
                }
            });
        });
    })();
</script>

