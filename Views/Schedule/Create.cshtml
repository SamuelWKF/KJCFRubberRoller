@model KJCFRubberRoller.Models.Schedule

@{
    if ((String)Url.RequestContext.RouteData.Values["id"] == null)
    {
        ViewBag.Title = "Add New Roller Schedule";
    }
    else
    {
        ViewBag.Title = "Update Rubber Roller Schedule";
    }
}

@*Operational Line dropdown list*@
@{
    List<SelectListItem> operationLineList = new List<SelectListItem>();
    operationLineList.Add(new SelectListItem
    {
        Text = "Line 1",
        Value = "1"
    });
    operationLineList.Add(new SelectListItem
    {
        Text = "Line 2",
        Value = "2",
    });
    operationLineList.Add(new SelectListItem
    {
        Text = "Line 3",
        Value = "3",
    });
    operationLineList.Add(new SelectListItem
    {
        Text = "Line 4",
        Value = "4"
    });
}

<div class="container">
    <div class="row mb-4">
        <div class="col-md-8 mx-auto">

            @if (TempData["formStatus"] != null)
            {
                <div class="alert @((bool)TempData["formStatus"] == true ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                        <span class="sr-only">Close</span>
                    </button>
                    @TempData["formStatusMsg"]
                </div>
            }

            <div class="py-2 bg-kjcf">
                <h2 class="text-white text-center">@((String)Url.RequestContext.RouteData.Values["id"] == null ? "Add New Roller Schedule" : "Update Rubber Roller Schedule")</h2>
            </div>
            <div class="bg-white container py-3">
                <p class="required">* Require field</p>
                @using (Html.BeginForm("Create", "Schedule", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()


                    <div class="form-group">
                        @Html.LabelFor(Model => Model.operationLine)<span class="required">*</span>
                        @Html.DropDownListFor(Model => Model.operationLine, operationLineList, "Select operation line", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.operationLine, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(Model => Model.rollerID)<span class="required">*</span>
                        @Html.TextBoxFor(Model => Model.rollerID, new { @class = "form-control", placeholder = "Enter Roller ID" })
                        @Html.ValidationMessageFor(model => model.rollerID, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(Model => Model.startDateTime)<span class="required">*</span>
                        @Html.TextBoxFor(Model => Model.startDateTime, new { @class = "form-control", placeholder = "Enter startDateTime" })
                        @Html.ValidationMessageFor(model => model.startDateTime, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(Model => Model.endDateTime)<span class="required">*</span>
                        @Html.TextBoxFor(Model => Model.endDateTime, new { @class = "form-control", placeholder = "Enter startDateTime" })
                        @Html.ValidationMessageFor(model => model.endDateTime, "", new { @class = "text-danger" })
                    </div>


                    <div class="form-group">
                        @Html.LabelFor(Model => Model.product)<span class="required">*</span>
                        @Html.TextBoxFor(Model => Model.product, new { @class = "form-control", placeholder = "Enter Product Name" })
                        @Html.ValidationMessageFor(model => model.product, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(Model => Model.tinplateSize)<span class="required">*</span>
                        @Html.TextBoxFor(Model => Model.tinplateSize, new { @class = "form-control", placeholder = "Enter Tinplate Size" })
                        @Html.ValidationMessageFor(model => model.tinplateSize, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(Model => Model.quantity)<span class="required">*</span>
                        @Html.TextBoxFor(Model => Model.quantity, new { @class = "form-control", min = 0, placeholder = "Enter Quantity" })
                        @Html.ValidationMessageFor(model => model.quantity, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group row">
                        <div class="col-md-6">
                            @Html.LabelFor(Model => Model.startMileage)<span class="required">*</span>
                            @Html.TextBoxFor(Model => Model.startMileage, new { @class = "form-control", min = 0, placeholder = "Enter Start Mileage" })
                            @Html.ValidationMessageFor(model => model.startMileage, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-6">
                            @Html.LabelFor(Model => Model.endMileage)<span class="required">*</span>
                            @Html.TextBoxFor(Model => Model.endMileage, new { @class = "form-control", placeholder = "Enter End Mileage" })
                            @Html.ValidationMessageFor(model => model.endMileage, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(Model => Model.remark)<span class="required">*</span>
                        @Html.TextAreaFor(Model => Model.remark, new { @class = "form-control", placeholder = "Enter Remark" })
                        @Html.ValidationMessageFor(model => model.remark, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group row">
                        <div class="col-md-6">
                            <input type="reset" value="Clear" class="btn btn-danger btn-block" />
                        </div>
                        <div class="col-md-6">
                            <input type="submit" value="Add New Schedule" class="btn btn-success btn-block" />
                        </div>
                    </div>

                }
            </div>
        </div>
    </div>
</div>

<script>
    (function () {
        if (document.querySelector('.alert') !== null) {
            setTimeout(() => {
                document.querySelector('.alert').remove();
            }, 5000);
        }
        document.querySelector('.rSize').addEventListener('keyup', (e) => {
            e.target.value = e.target.value.toUpperCase();
        });
    })();
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
