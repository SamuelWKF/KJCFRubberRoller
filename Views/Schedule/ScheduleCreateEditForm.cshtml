@using KJCFRubberRoller.Models
@model KJCFRubberRoller.Models.Schedule

@{
    if ((String)Url.RequestContext.RouteData.Values["id"] == null)
    {
        ViewBag.Title = "Add New Schedule Record";
    }
    else
    {
        ViewBag.Title = "Update Schedule Record";
    }

    Layout = "~/Views/Shared/_Layout.cshtml";
    RubberRoller rubberRoller = (RubberRoller)ViewData["roller"];

    /*Operational Line dropdown list*/
    List<SelectListItem> operationLineList = new List<SelectListItem>();
    operationLineList.Add(new SelectListItem
    {
        Text = "Line 1",
        Value = "1"
    });
    operationLineList.Add(new SelectListItem
    {
        Text = "Line 2",
        Value = "2",
    });
    operationLineList.Add(new SelectListItem
    {
        Text = "Line 3",
        Value = "3",
    });
    operationLineList.Add(new SelectListItem
    {
        Text = "Line 4",
        Value = "4"
    });
}

<div class="container">
    <div class="row mb-4">
        <div class="col-md-8 mx-auto">
            <div class="py-2 bg-kjcf">
                <h2 class="text-white text-center">@((String)Url.RequestContext.RouteData.Values["id"] == null ? "Add New Schedule Record" : $"Update Schedule Record #{Model.scheduleID}")</h2>
            </div>

            @if (TempData["formStatus"] != null)
            {
                <div class="alert @((bool)TempData["formStatus"] == true ? "alert-success" : "alert-danger") alert-dismissible fade show pb-2" role="alert">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                        <span class="sr-only">Close</span>
                    </button>
                    @TempData["formStatusMsg"]
                </div>
            }

            <div class="bg-white container py-3">
                <p class="required">* Require field</p>

                @using (Html.BeginForm((String)Url.RequestContext.RouteData.Values["id"] == null ? "CreateSchedule" : "UpdateSchedule", "Schedule", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()

                    // Roller ID
                    <div class="form-group">
                        @Html.Label("Roller ID")
                        @Html.TextBox("rollID", rubberRoller.rollerID, new { @class = "form-control", @readonly = "true" })
                        @Html.HiddenFor(Model => Model.rollerID, new { @Value = rubberRoller.id })
                    </div>

                    // Operation Line
                    <div class="form-group">
                        @Html.LabelFor(Model => Model.operationLine)
                        @Html.DropDownListFor(Model => Model.operationLine, operationLineList, "Select operation line", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.operationLine, "", new { @class = "text-danger" })
                    </div>

                    // Product
                    <div class="form-group">
                        @Html.LabelFor(Model => Model.product)<span class="required">*</span>
                        @Html.TextBoxFor(model => model.product, new { @class = "form-control", placeholder = "Enter product here" })
                        @Html.ValidationMessageFor(model => model.product, "", new { @class = "text-danger" })
                    </div>

                    // Tinplate Size
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(Model => Model.tinplateSize)<span class="required">*</span>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.Label("Thickness") (Millimetre - mm)
                                @Html.TextBox("thickness", "", new { @class = "form-control", placeholder = "Enter thickness here", type = "number", min = "0", step = "0.01", required = "required" })
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.Label("Width") (Millimetre - mm)
                                @Html.TextBox("width", "", new { @class = "form-control", placeholder = "Enter width here", type = "number", min = "0", required = "required" })
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                @Html.Label("Length") (Millimetre - mm)
                                @Html.TextBox("length", "", new { @class = "form-control", placeholder = "Enter length here", type = "number", min = "0", required = "required" })
                            </div>
                        </div>
                    </div>

                    // Quantity
                    <div class="form-group">
                        @Html.LabelFor(model => model.quantity)<span class="required">*</span>
                        @Html.TextBoxFor(model => model.quantity, new
                        {
                            @class = "form-control",
                            placeholder = "Enter quantity here",
                            type = "number",
                            min = "1",
                            step = "1",
                            max="5000000",
                          onkeypress = "return event.charCode >= 48 && event.charCode <= 57"
                        })
                        @Html.ValidationMessageFor(model => model.quantity, "", new { @class = "text-danger" })
                    </div>

                    // Start Date Time
                    <div class="form-group">
                        @Html.LabelFor(model => model.startDateTime)<span class="required">*</span>
                        @Html.TextBoxFor(model => model.startDateTime, new { @class = "form-control", id = "startDate", type = "datetime-local", placeholder = "Enter start date time here" })
                        @Html.ValidationMessageFor(model => model.startDateTime, "", new { @class = "text-danger" })
                    </div>

                    // Start Mileage
                    <div class="form-group">
                        @Html.Label("Start Mileage")
                        @{
                            var lastSchedule = rubberRoller.Schedules.LastOrDefault();
                            var mileage = (lastSchedule == null) ? 0 : lastSchedule.endMileage;
                        }
                        @Html.TextBox("startMil", mileage, new { @class = "form-control", @readonly = "true" })
                        @Html.HiddenFor(Model => Model.startMileage, new { @Value = mileage })
                    </div>

                    if ((String)Url.RequestContext.RouteData.Values["id"] != null)
                    {
                        // End Mileage
                        <div class="form-group">
                            @Html.LabelFor(model => model.endMileage)
                            @{
                                var lastSched = rubberRoller.Schedules.LastOrDefault();
                                var minMileage = (lastSchedule == null) ? 0 : lastSched.endMileage + 1;
                            }
                            @Html.TextBoxFor(model => model.endMileage, new { Value = 0, @class = "form-control", placeholder = "Enter end mileage here", min = minMileage })
                            @Html.ValidationMessageFor(model => model.endMileage, "", new { @class = "text-danger" })
                        </div>
                    }

                    //Remark
                    <div class="form-group">
                        @Html.LabelFor(model => model.remark)
                        @Html.TextBoxFor(model => model.remark, new { @class = "form-control", placeholder = "Enter remark here" })
                        @Html.ValidationMessageFor(model => model.remark, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group row">
                        <div class="col-md-6">
                            <input type="reset" value="Clear" class="btn btn-primary btn-block" />
                        </div>
                        <div class="col-md-6">
                            <input type="submit" value='@((String)Url.RequestContext.RouteData.Values["id"] == null ? "Add New Schedule Record" : "Update Schedule Record")' class="btn btn-success btn-block" />
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <!-- Bootstrap Select script -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.12/dist/js/bootstrap-select.min.js"></script>
    <script>
        var startTime = new Date();
        startTime = new Date(startTime.getTime() + (startTime.getTimezoneOffset()));
        let time = `${startTime.getFullYear()}-${(startTime.getMonth() + 1).toString().padStart(2, '0')}-${startTime.getDate().toString().padStart(2, '0')}T${startTime.toTimeString().substr(0, 8)}`;

        document.querySelector('#startDate').setAttribute('min', time);
        document.querySelector('#startDate').setAttribute('value', time);

        (function () {
            if (document.querySelector('.alert') !== null) {
                setTimeout(() => {
                    document.querySelector('.alert').remove();
                }, 5000);
            }
        })();
    </script>
}
