@model KJCFRubberRoller.Models.AfterRollerProductionChecklist

@{
    ViewBag.Title = "AfterChecklistCreate";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@*Operational Line dropdown list*@
@{
    List<SelectListItem> operationLineList = new List<SelectListItem>();
    operationLineList.Add(new SelectListItem
    {
        Text = "Line 1",
        Value = "1"
    });
    operationLineList.Add(new SelectListItem
    {
        Text = "Line 2",
        Value = "2",
    });
    operationLineList.Add(new SelectListItem
    {
        Text = "Line 3",
        Value = "3",
    });
    operationLineList.Add(new SelectListItem
    {
        Text = "Line 4",
        Value = "4"
    });
}

@*sentTo dropdown list*@
@{
    List<SelectListItem> sentToList = new List<SelectListItem>();
    sentToList.Add(new SelectListItem
    {
        Text = "Eikoh",
        Value = "1"
    });
    sentToList.Add(new SelectListItem
    {
        Text = "Mega",
        Value = "2",
    });
    sentToList.Add(new SelectListItem
    {
        Text = "Other",
        Value = "3",
    });
}



<div class="container">
    <div class="row mb-4">
        <div class="col-md-8 mx-auto">

            @if (TempData["formStatus"] != null)
            {
                <div class="alert @((bool)TempData["formStatus"] == true ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                        <span class="sr-only">Close</span>
                    </button>
                    @TempData["formStatusMsg"]
                </div>
            }
            <div class="py-2 bg-kjcf">
                <h2 class="text-white text-center">Add New After Production Checklist</h2>
            </div>
            <div class="bg-white container py-3">
                <p class="required">* Require field</p>
                @using (Html.BeginForm("AfterChecklistCreate", "Checklist", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()

                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(Model => Model.rollerID)<span class="required">*</span>
                        @Html.TextBoxFor(Model => Model.rollerID, new { @class = "form-control", placeholder = "Enter Roller ID" })
                        @Html.ValidationMessageFor(model => model.rollerID, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-6">
                        @Html.LabelFor(Model => Model.operationLine)<span class="required">*</span>
                        @Html.DropDownListFor(Model => Model.operationLine, operationLineList, "Select operation line", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.operationLine, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-6">
                        @Html.LabelFor(Model => Model.dateTime)<span class="required">*</span>
                        @Html.TextBoxFor(Model => Model.dateTime, new { @class = "form-control", placeholder = "Enter Date and Time" })
                        @Html.ValidationMessageFor(model => model.dateTime, "", new { @class = "text-danger" })
                    </div>


                    <div class="form-group">
                        <div class="col-md-6">
                            @Html.LabelFor(Model => Model.rollerAppearance)<span class="required">*</span>
                            @Html.RadioButtonFor(Model => Model.rollerAppearance, "Yes") @Html.Label("Yes")
                            @Html.RadioButtonFor(Model => Model.rollerAppearance, "No") @Html.Label("No")
                            @Html.ValidationMessageFor(model => model.rollerAppearance, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-6">
                            @Html.LabelFor(Model => Model.rollerSendTo)<span class="required">*</span>
                            @Html.DropDownListFor(Model => Model.rollerSendTo, sentToList, "Select supplier", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.rollerSendTo, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(Model => Model.remarks)<span class="required">*</span>
                        @Html.TextBoxFor(Model => Model.remarks, new { @class = "form-control", placeholder = "Enter Remarks" })
                        @Html.ValidationMessageFor(model => model.remarks, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group row">
                        <div class="col-md-6">
                            <input type="reset" value="Clear" class="btn btn-danger btn-block" />
                        </div>
                        <div class="col-md-6">
                            <input type="submit" value="Add After Checklist" class="btn btn-success btn-block" />
                        </div>
                    </div>

                }
            </div>
        </div>
    </div>
</div>
<script>
    (function () {
        if (document.querySelector('.alert') !== null) {
            setTimeout(() => {
                document.querySelector('.alert').remove();
            }, 5000);
        }
        document.querySelector('.rSize').addEventListener('keyup', (e) => {
            e.target.value = e.target.value.toUpperCase();
        });
    })();
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
