@model KJCFRubberRoller.Models.BeforeRollerIssueChecklist

@{
    if ((String)Url.RequestContext.RouteData.Values["id"] == null)
    {
        ViewBag.Title = "Add New Before Roller Issue Checklist";
    }
    else
    {
        ViewBag.Title = "Update Before Roller Issue Checklist";
    }
}

@*Operational Line dropdown list*@
@{
    List<SelectListItem> operationLineList = new List<SelectListItem>();
    operationLineList.Add(new SelectListItem
    {
        Text = "Line 1",
        Value = "1"
    });
    operationLineList.Add(new SelectListItem
    {
        Text = "Line 2",
        Value = "2",
    });
    operationLineList.Add(new SelectListItem
    {
        Text = "Line 3",
        Value = "3",
    });
    operationLineList.Add(new SelectListItem
    {
        Text = "Line 4",
        Value = "4"
    });
}

<div class="container">
    <div class="row mb-4">
        <div class="col-md-8 mx-auto">

            @if (TempData["formStatus"] != null)
            {
                <div class="alert @((bool)TempData["formStatus"] == true ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                        <span class="sr-only">Close</span>
                    </button>
                    @TempData["formStatusMsg"]
                </div>
            }

            <div class="py-2 bg-kjcf">
                <h2 class="text-white text-center">@((String)Url.RequestContext.RouteData.Values["id"] == null ? "Add New Before Roller Issue Checklist" : $"Update Before Roller Issue Checklist {Model.rollerID}")</h2>
            </div>
            <div class="bg-white container py-3">
                <p class="required">* Require field</p>
                @using (Html.BeginForm("beforeChecklistCreate", "Checklist", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()

                    <div class="form-group">
                        @Html.LabelFor(Model => Model.rollerID)<span class="required">*</span>
                        @Html.TextBoxFor(Model => Model.rollerID, new { @class = "form-control", placeholder = "Enter Roller ID" })
                        @Html.ValidationMessageFor(model => model.rollerID, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group row">
                        <div class="col-md-4">
                            @Html.LabelFor(Model => Model.operationLine)<span class="required">*</span>
                            @Html.DropDownListFor(Model => Model.operationLine, operationLineList, "Select operation line", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.operationLine, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-4">
                            @Html.LabelFor(Model => Model.dateTime)<span class="required">*</span>
                            @Html.TextBoxFor(Model => Model.dateTime, new { @class = "form-control", placeholder = "Enter Date and Time" })
                            @Html.ValidationMessageFor(model => model.dateTime, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-4">
                            @Html.LabelFor(Model => Model.rollerSH)<span class="required">*</span>
                            @Html.TextBoxFor(Model => Model.rollerSH, new { @class = "form-control", placeholder = "Enter Roller Shore Hardness" })
                            @Html.ValidationMessageFor(model => model.rollerSH, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        <div class="col-md-4">
                            @Html.LabelFor(Model => Model.rollerRoundness)<span class="required">*</span>
                            @Html.TextBoxFor(Model => Model.rollerRoundness, new { @class = "form-control", placeholder = "Enter Roller Roundness" })
                            @Html.ValidationMessageFor(model => model.rollerRoundness, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-4">
                            @Html.LabelFor(Model => Model.hubsCondition)<span class="required">*</span>
                            @Html.RadioButtonFor(Model => Model.hubsCondition, "Yes") @Html.Label("Yes")
                            @Html.RadioButtonFor(Model => Model.hubsCondition, "No") @Html.Label("No")
                            @Html.ValidationMessageFor(model => model.hubsCondition, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-4">
                            @Html.LabelFor(Model => Model.nutUsed)<span class="required">*</span>
                            @Html.RadioButtonFor(Model => Model.nutUsed, "Yes") @Html.Label("Yes")
                            @Html.RadioButtonFor(Model => Model.nutUsed, "No") @Html.Label("No")
                            @Html.ValidationMessageFor(model => model.nutUsed, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    if ((String)Url.RequestContext.RouteData.Values["id"] != null)
                    {
                        @Html.HiddenFor(m => m.id)
                    }

                    <div class="form-group row">
                        <div class="col-md-6">
                            <input type="reset" value="Clear" class="btn btn-primary btn-block" />
                        </div>
                        <div class="col-md-6">
                            <input type="submit" value="Add New Before Roller Issue Checklist" class="btn btn-success btn-block" />
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>



<script>
    (function () {
        if (document.querySelector('.alert') !== null) {
            setTimeout(() => {
                document.querySelector('.alert').remove();
            }, 5000);
        }
        document.querySelector('.rSize').addEventListener('keyup', (e) => {
            e.target.value = e.target.value.toUpperCase();
        });
    })();
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
